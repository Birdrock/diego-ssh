// This file was generated by counterfeiter
package fake_authenticators

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-ssh/authenticators"
	"github.com/pivotal-golang/lager"
)

type FakeCCAccessChecker struct {
	CheckAccessStub        func(logger lager.Logger, appGuid string, token string) (string, error)
	checkAccessMutex       sync.RWMutex
	checkAccessArgsForCall []struct {
		logger  lager.Logger
		appGuid string
		token   string
	}
	checkAccessReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeCCAccessChecker) CheckAccess(logger lager.Logger, appGuid string, token string) (string, error) {
	fake.checkAccessMutex.Lock()
	fake.checkAccessArgsForCall = append(fake.checkAccessArgsForCall, struct {
		logger  lager.Logger
		appGuid string
		token   string
	}{logger, appGuid, token})
	fake.checkAccessMutex.Unlock()
	if fake.CheckAccessStub != nil {
		return fake.CheckAccessStub(logger, appGuid, token)
	} else {
		return fake.checkAccessReturns.result1, fake.checkAccessReturns.result2
	}
}

func (fake *FakeCCAccessChecker) CheckAccessCallCount() int {
	fake.checkAccessMutex.RLock()
	defer fake.checkAccessMutex.RUnlock()
	return len(fake.checkAccessArgsForCall)
}

func (fake *FakeCCAccessChecker) CheckAccessArgsForCall(i int) (lager.Logger, string, string) {
	fake.checkAccessMutex.RLock()
	defer fake.checkAccessMutex.RUnlock()
	return fake.checkAccessArgsForCall[i].logger, fake.checkAccessArgsForCall[i].appGuid, fake.checkAccessArgsForCall[i].token
}

func (fake *FakeCCAccessChecker) CheckAccessReturns(result1 string, result2 error) {
	fake.CheckAccessStub = nil
	fake.checkAccessReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ authenticators.CCAccessChecker = new(FakeCCAccessChecker)
