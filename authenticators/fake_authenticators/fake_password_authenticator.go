// This file was generated by counterfeiter
package fake_authenticators

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-ssh/authenticators"
	"golang.org/x/crypto/ssh"
)

type FakePasswordAuthenticator struct {
	AuthenticateStub        func(metadata ssh.ConnMetadata, password []byte) (*ssh.Permissions, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		metadata ssh.ConnMetadata
		password []byte
	}
	authenticateReturns struct {
		result1 *ssh.Permissions
		result2 error
	}
}

func (fake *FakePasswordAuthenticator) Authenticate(metadata ssh.ConnMetadata, password []byte) (*ssh.Permissions, error) {
	fake.authenticateMutex.Lock()
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		metadata ssh.ConnMetadata
		password []byte
	}{metadata, password})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(metadata, password)
	} else {
		return fake.authenticateReturns.result1, fake.authenticateReturns.result2
	}
}

func (fake *FakePasswordAuthenticator) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakePasswordAuthenticator) AuthenticateArgsForCall(i int) (ssh.ConnMetadata, []byte) {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return fake.authenticateArgsForCall[i].metadata, fake.authenticateArgsForCall[i].password
}

func (fake *FakePasswordAuthenticator) AuthenticateReturns(result1 *ssh.Permissions, result2 error) {
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 *ssh.Permissions
		result2 error
	}{result1, result2}
}

var _ authenticators.PasswordAuthenticator = new(FakePasswordAuthenticator)
