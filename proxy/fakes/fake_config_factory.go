// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-ssh/proxy"
	"golang.org/x/crypto/ssh"
)

type FakeConfigFactory struct {
	CreateStub        func(permissions *ssh.Permissions) (config *ssh.ClientConfig, address string, err error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		permissions *ssh.Permissions
	}
	createReturns struct {
		result1 *ssh.ClientConfig
		result2 string
		result3 error
	}
}

func (fake *FakeConfigFactory) Create(permissions *ssh.Permissions) (config *ssh.ClientConfig, address string, err error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		permissions *ssh.Permissions
	}{permissions})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(permissions)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3
	}
}

func (fake *FakeConfigFactory) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeConfigFactory) CreateArgsForCall(i int) *ssh.Permissions {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].permissions
}

func (fake *FakeConfigFactory) CreateReturns(result1 *ssh.ClientConfig, result2 string, result3 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *ssh.ClientConfig
		result2 string
		result3 error
	}{result1, result2, result3}
}

var _ proxy.ConfigFactory = new(FakeConfigFactory)
